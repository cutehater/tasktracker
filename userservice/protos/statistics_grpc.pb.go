// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: statistics.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StatisticsService_GetTotalViewsLikesCount_FullMethodName = "/StatisticsService/GetTotalViewsLikesCount"
	StatisticsService_GetTopTasks_FullMethodName             = "/StatisticsService/GetTopTasks"
	StatisticsService_GetTopUsers_FullMethodName             = "/StatisticsService/GetTopUsers"
)

// StatisticsServiceClient is the client API for StatisticsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StatisticsServiceClient interface {
	GetTotalViewsLikesCount(ctx context.Context, in *TotalCountRequest, opts ...grpc.CallOption) (*TotalCountResponse, error)
	GetTopTasks(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopTasksResponse, error)
	GetTopUsers(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopUsersResponse, error)
}

type statisticsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStatisticsServiceClient(cc grpc.ClientConnInterface) StatisticsServiceClient {
	return &statisticsServiceClient{cc}
}

func (c *statisticsServiceClient) GetTotalViewsLikesCount(ctx context.Context, in *TotalCountRequest, opts ...grpc.CallOption) (*TotalCountResponse, error) {
	out := new(TotalCountResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetTotalViewsLikesCount_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetTopTasks(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopTasksResponse, error) {
	out := new(TopTasksResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetTopTasks_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *statisticsServiceClient) GetTopUsers(ctx context.Context, in *TopRequest, opts ...grpc.CallOption) (*TopUsersResponse, error) {
	out := new(TopUsersResponse)
	err := c.cc.Invoke(ctx, StatisticsService_GetTopUsers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StatisticsServiceServer is the server API for StatisticsService service.
// All implementations must embed UnimplementedStatisticsServiceServer
// for forward compatibility
type StatisticsServiceServer interface {
	GetTotalViewsLikesCount(context.Context, *TotalCountRequest) (*TotalCountResponse, error)
	GetTopTasks(context.Context, *TopRequest) (*TopTasksResponse, error)
	GetTopUsers(context.Context, *TopRequest) (*TopUsersResponse, error)
	mustEmbedUnimplementedStatisticsServiceServer()
}

// UnimplementedStatisticsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedStatisticsServiceServer struct {
}

func (UnimplementedStatisticsServiceServer) GetTotalViewsLikesCount(context.Context, *TotalCountRequest) (*TotalCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTotalViewsLikesCount not implemented")
}
func (UnimplementedStatisticsServiceServer) GetTopTasks(context.Context, *TopRequest) (*TopTasksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopTasks not implemented")
}
func (UnimplementedStatisticsServiceServer) GetTopUsers(context.Context, *TopRequest) (*TopUsersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTopUsers not implemented")
}
func (UnimplementedStatisticsServiceServer) mustEmbedUnimplementedStatisticsServiceServer() {}

// UnsafeStatisticsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StatisticsServiceServer will
// result in compilation errors.
type UnsafeStatisticsServiceServer interface {
	mustEmbedUnimplementedStatisticsServiceServer()
}

func RegisterStatisticsServiceServer(s grpc.ServiceRegistrar, srv StatisticsServiceServer) {
	s.RegisterService(&StatisticsService_ServiceDesc, srv)
}

func _StatisticsService_GetTotalViewsLikesCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TotalCountRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetTotalViewsLikesCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetTotalViewsLikesCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetTotalViewsLikesCount(ctx, req.(*TotalCountRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetTopTasks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetTopTasks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetTopTasks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetTopTasks(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _StatisticsService_GetTopUsers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TopRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StatisticsServiceServer).GetTopUsers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StatisticsService_GetTopUsers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StatisticsServiceServer).GetTopUsers(ctx, req.(*TopRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// StatisticsService_ServiceDesc is the grpc.ServiceDesc for StatisticsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StatisticsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "StatisticsService",
	HandlerType: (*StatisticsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetTotalViewsLikesCount",
			Handler:    _StatisticsService_GetTotalViewsLikesCount_Handler,
		},
		{
			MethodName: "GetTopTasks",
			Handler:    _StatisticsService_GetTopTasks_Handler,
		},
		{
			MethodName: "GetTopUsers",
			Handler:    _StatisticsService_GetTopUsers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "statistics.proto",
}
